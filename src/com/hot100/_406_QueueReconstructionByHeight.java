package com.hot100;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author wangwei
 * @date 2022/4/28 10:10
 * @description: _406_QueueReconstructByHeight
 *
 * 406. 根据身高重建队列
 * 假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
 *
 * 请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。
 *
 *
 *
 * 示例 1：
 *
 * 输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
 * 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
 * 解释：
 * 编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
 * 编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
 * 编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
 * 编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
 * 编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
 * 编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
 * 因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
 * 示例 2：
 *
 * 输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
 * 输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 *
 *
 * 提示：
 *
 * 1 <= people.length <= 2000
 * 0 <= hi <= 106
 * 0 <= ki < people.length
 * 题目数据确保队列可以被重建
 */
public class _406_QueueReconstructionByHeight {

    /**
     * 遇到两个维度变化的，一般是按照某个维护升序某个维度或者都是升序或者降序进行排序
     * 总之，先固定一个维度，再在另一个维度上处理
     *
     * 因为每个人要去找到大于等于它身高的指定数量的人，那么我们对所有人按照身高降序排序，身高相同时，按照第二个维度(前面身高大于等于自身的人数)升序排序，
     *          这样对(3,1).(3,2)这种来说是合理的，因为(3,1)确实满足3大于第二个数对的个数3，并且正好在第二个数对前面
     * 并且，按照题目数据的合理性，越高的人的第二个维度数值越会为0，这样排序完后，最高的人肯定在前面，它的第二维度数值一定为0。那么它处于第一个位置也是合理的
     *
     * 然后逐个遍历 people 数组 的数对 p。
     *     如果 p[1] == 0,因为已经按照身高排序了，所以前面的肯定比它高，那么它处于当前位置就是合理的
     *     如果 p[1] != 0,前面的都比它高，只要讲它放置在第p[1]个位置，那么也是合理的
     *          并且 比如把 (3,1)放置在 (5,0),(3,1),(6,0) 这个位置，也完全不会造成 (6.0)位置不合理i
     *     相当于一个插入排序
     *
     * List接口已经提供了这个方法， list.add(index, element), 并且 原index及往后位置元素会顺序后移
     * 要注意的是，这个方法有个参数校验，就是 index必须 <= size，否则报空指针
     * 对于本题来说，排序后的数对，前几个的p[1]肯定是0，所以不会报越界
     * 如果你第一个数对就是(x,1)这种，因为 1 > size=0，会报越界错误，显然第一个数对(x,1)的话，这题目就不合理，所以无需额外考虑
     * @param people
     * @return
     */
    public int[][] reconstructQueue(int[][] people) {
        // 按照身高降序，相同身高，第二个维度越大越靠后，满足 它 前面的身高 都 大于等于 自己
        // 要修正的就是，它前面大于等于自己的位置要有p[1]个，就是向前移动，找到合适位置，进行插入
        Arrays.sort(people, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]);
        List<int[]> list = new ArrayList<>();
        // 已按身高排序
        for (int[] p: people) {
            // p 前面要有 p[1]个身高大于等于自己的，那么自己应该在第p[1]位置
            list.add(p[1], p);
        }
        return list.toArray(new int[people.length][]);
    }
}
