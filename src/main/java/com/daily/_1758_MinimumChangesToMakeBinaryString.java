package com.daily;

/**
 * @author wangwei
 * @date 2022/11/29 12:53
 * @description: _1758_MinimumChangesToMakeBinaryString
 *
 * 1758. 生成交替二进制字符串的最少操作数
 * 给你一个仅由字符 '0' 和 '1' 组成的字符串 s 。一步操作中，你可以将任一 '0' 变成 '1' ，或者将 '1' 变成 '0' 。
 *
 * 交替字符串 定义为：如果字符串中不存在相邻两个字符相等的情况，那么该字符串就是交替字符串。例如，字符串 "010" 是交替字符串，而字符串 "0100" 不是。
 *
 * 返回使 s 变成 交替字符串 所需的 最少 操作数。
 *
 *
 *
 * 示例 1：
 *
 * 输入：s = "0100"
 * 输出：1
 * 解释：如果将最后一个字符变为 '1' ，s 就变成 "0101" ，即符合交替字符串定义。
 * 示例 2：
 *
 * 输入：s = "10"
 * 输出：0
 * 解释：s 已经是交替字符串。
 * 示例 3：
 *
 * 输入：s = "1111"
 * 输出：2
 * 解释：需要 2 步操作得到 "0101" 或 "1010" 。
 *
 *
 * 提示：
 *
 * 1 <= s.length <= 104
 * s[i] 是 '0' 或 '1'
 * 通过次数22,618提交次数32,664
 */
public class _1758_MinimumChangesToMakeBinaryString {

    /**
     * 既然1和0不能相邻，那么最终s只可能得到两种结果：
     *
     *  以 0 开始的交替串，即 偶数位都是0，奇数位都是1.
     *  以 1 开始的交替串，即 偶数位都是1，奇数位都是0
     *
     *  假如 s 通过 cnt 个位置变化得到了第一种结果，那如果这cnt个位置不变，剩下位置反转，就可以得到 第二种结果
     *  即 得到第一种结果 需要 cnt 个位置变化；得到第二种结果需要 n - cnt 个位置变化；取更小值
     * @param s
     * @return
     */
    public int minOperations(String s) {
        int ans = 0;
        // 假设统计得到第一种结果需要的操作数
        for (int i = 0; i < s.length(); ++i) {
            // 当前位置奇偶性，当前位置字符，和 '0' 字符异或
            ans += (i & 1) ^ s.charAt(i) ^ '0';
        }
        // 返回得到两种结果所需操作数的较小值
        return Math.min(ans, s.length() - ans);
    }
}
