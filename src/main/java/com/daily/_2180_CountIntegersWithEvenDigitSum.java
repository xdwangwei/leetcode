package com.daily;

/**
 * @author wangwei
 * @date 2023/1/7 20:40
 * @description: _2180_CountIntegersWithEvenDigitSum
 *
 * 2180. 统计各位数字之和为偶数的整数个数
 * 给你一个正整数 num ，请你统计并返回 小于或等于 num 且各位数字之和为 偶数 的正整数的数目。
 *
 * 正整数的 各位数字之和 是其所有位上的对应数字相加的结果。
 *
 *
 *
 * 示例 1：
 *
 * 输入：num = 4
 * 输出：2
 * 解释：
 * 只有 2 和 4 满足小于等于 4 且各位数字之和为偶数。
 * 示例 2：
 *
 * 输入：num = 30
 * 输出：14
 * 解释：
 * 只有 14 个整数满足小于等于 30 且各位数字之和为偶数，分别是：
 * 2、4、6、8、11、13、15、17、19、20、22、24、26 和 28 。
 *
 *
 * 提示：
 *
 * 1 <= num <= 1000
 * 通过次数28,336提交次数41,606
 */
public class _2180_CountIntegersWithEvenDigitSum {

    /**
     * 方法：数学
     *
     * 我们观察发现，在 [0,..x] 的所有数中，每 10 个数中，就有 5 个数的各位数字之和为偶数。
     * 例如，在 [0,..9] 中，每 10 个数中，就有 5 个数的各位数字之和为偶数，分别是 0,2,4,6,8。
     *
     * 因此，我们可以先算出 num 中有多少个 10 的倍数，然后乘以 5 再减去 1（排除 0 这个非正整数偶数），
     * 可以得到初始答案 ans = ⌊num / 10⌋ × 5 − 1。
     *
     * 接下来，我们还需要考虑剩下的 num%10+1 个数字中，有多少个数的各位数字之和为偶数。
     * 由于剩下的这些数字肯定不足10个了，我们可以逐个遍历，判断其是各位数字之和否为偶数
     *      for (int i = num/10 * 10; i <= num; ++i) {
     *             int x = i, sum = 0;
     *             while (x > 0) {
     *                 sum += x % 10;
     *                 x /= 10;
     *             }
     *             if ((sum & 1) == 0) {
     *                 res++;
     *             }
     *         }
     * 但，当数字特别大时，还是会有很多重复计算过程，
     * 考虑到剩下的数字形式为 abcxyz0、abcxyz1、abcxyz2、....，这种形式，
     * 对每个数字进行判断时，都会对其共有的前面部分数字进行累加和计算，因此可以通过以下策略优化此过程：
     * 先计算 abcxyz 累加和 s，这些数字最后一位分别为 0、1、2、... num % 10 = k，共 k 个数字
     *              若 k 为 偶数，则最低位 有 k / 2 + 1 个偶数，k / 2 个奇数
     *              若 k 为 奇数，则最低位 有 k / 2 个偶数，k / 2 个奇数
     *              合起来就是，最低位数字 偶数：k / 2 + 1；奇数：(x + 1) / 2
     * 那么当前面数字和 s 为偶数时，总和为偶数，共 k / 2 + 1
     *            当 s 为奇数时，总和为偶数，共 (k + 1) / 2
     *
     * 我们不妨举个例子，假设 num 为 123，那么前面 [0,..119] 中一共有 12 个 10 的倍数，
     * 每个 10 的倍数中有 5 个数的各位数字之和为偶数，因此，初始答案为 ans=12×5−1=59。
     *
     * 剩下的数字分别是 120,121,122,123，每个数字的前两位数字之和为 s=1+2=3，是奇数，
     * 最低为分别为 0、1、2、3，k = 3，总和为偶数，需要最低位也为奇数，共 (3+1)/2 = 2 种
     * 因此，剩下的数字中，只有 2 个数的各位数字之和为偶数，累加到答案 ans 中，最终答案为 ans+2=61。
     *
     * 作者：lcbin
     * 链接：https://leetcode.cn/problems/count-integers-with-even-digit-sum/solution/by-lcbin-dq6j/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     * @param num
     * @return
     */
    public int countEven(int num) {
        // y 表示 num 中有多少个10，也表示剩下x+1个数字前面共同部分，x 表示 num 最低位数字
        int y = num / 10, x = num % 10;
        // 每10个数字中有5个偶数，除去0，初始化res 为 y*5 - 1
        // 剩下的x+1个数字 形如 abc0、abc1、...、abcx，ySum 记录它们共同部分 abc 各个位置元素和
        int res = y * 5 - 1, ySum = 0;
        while (y != 0) {
            ySum += y % 10;
            y /= 10;
        }
        // 最低位数字 偶数：x / 2 + 1；奇数：(x + 1) / 2
        // 若 前面数字和为偶数，最低位也要为偶数
        if (ySum % 2 == 0) {
            res += x / 2 + 1;
        // 若 前面数字和为奇数，最低位也要为奇数
        } else {
            res += (x + 1) / 2;
        }
        // 返回
        return res;
    }
}
