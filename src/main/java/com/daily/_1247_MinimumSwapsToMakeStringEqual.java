package com.daily;

/**
 * @author wangwei
 * @date 2023/2/25 22:32
 * @description: _1247_MinimumSwapsToMakeStringEqual
 *
 * 1247. 交换字符使得字符串相同
 * 有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 "x" 和 "y"，你需要通过「交换字符」的方式使这两个字符串相同。
 *
 * 每次「交换字符」的时候，你都可以在两个字符串中各选一个字符进行交换。
 *
 * 交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。也就是说，我们可以交换 s1[i] 和 s2[j]，但不能交换 s1[i] 和 s1[j]。
 *
 * 最后，请你返回使 s1 和 s2 相同的最小交换次数，如果没有方法能够使得这两个字符串相同，则返回 -1 。
 *
 *
 *
 * 示例 1：
 *
 * 输入：s1 = "xx", s2 = "yy"
 * 输出：1
 * 解释：
 * 交换 s1[0] 和 s2[1]，得到 s1 = "yx"，s2 = "yx"。
 * 示例 2：
 *
 * 输入：s1 = "xy", s2 = "yx"
 * 输出：2
 * 解释：
 * 交换 s1[0] 和 s2[0]，得到 s1 = "yy"，s2 = "xx" 。
 * 交换 s1[0] 和 s2[1]，得到 s1 = "xy"，s2 = "xy" 。
 * 注意，你不能交换 s1[0] 和 s1[1] 使得 s1 变成 "yx"，因为我们只能交换属于两个不同字符串的字符。
 * 示例 3：
 *
 * 输入：s1 = "xx", s2 = "xy"
 * 输出：-1
 * 示例 4：
 *
 * 输入：s1 = "xxyyxyxyxx", s2 = "xyyxyxxxyx"
 * 输出：4
 *
 *
 * 提示：
 *
 * 1 <= s1.length, s2.length <= 1000
 * s1, s2 只包含 'x' 或 'y'。
 * 通过次数27,258提交次数39,795
 */
public class _1247_MinimumSwapsToMakeStringEqual {

    /**
     * 方法：贪心
     * s1 和 s2 只由 字符 x、y 组成。
     * 因此 s1[i] 和 s2[j] 可交换的情况为 s1[i] = 'x',s2[j]='Y'；或者 s1[i] = 'y',s2[j]='x'
     * 记第一种情况为 “xy”，出现次数 a 次；记 第二种情况为 “yx”，出现次数为 b 次；
     *
     * 对于 “xy”，最优的交换方法是 再选择一个 “xy”，“交叉交换”，如下面所示，一次交换 减少两个 “xy”
     *    [x] ... x.... x....       [y] ... x.... x....
     *                       -->
     *    y.... [y].....y....       y ... [x].... x....
     * 当然了，“xy”也可以自身交换，得到 “yx”，如下所示，交换后 “xy”的个数减少1，“yx”的个数增加1，并没有完成消除，不是最优
     *    [x] ... x.... x....       [y] ... x.... x....
     *                       -->
     *    [y].... y.....y....       [x] ... y.... x....
     *
     * 所以 “xy” 的最优交换方式是 再选择 一个 “xy”，“交叉交换”，一次减少 2 个“xy”，共需要 a / 2 次交换
     * 同理 “yx” 的最优交换方式是 再选择 一个 “yx”，“交叉交换”，一次减少 2 个“yx”，共需要 b / 2 次交换
     *
     * 如果 a、b 都是偶数，上述方式正好完成全部交换，共 a/2 + b/2 次
     * 如果 a、b 都是奇数，上述方式后还剩下一个“xy”和一个”yx“，此时 让”xy“选择自身交换变成”yx“，再和另一个”yx“交叉交换就可消除。
     *                  共需要 2 + a/2 + b/2 次
     * 如果 a、b 一个是奇数，一个是偶数，那么最后会只剩下一个 ”xy“ 或 一个 ”yx“，无论如何，无法全部消除，返回 -1
     *
     * 总计：
     * 如果 a + b 是奇数，返回 -1
     * 否则， 返回 a/2 + b/2 + a%2 + b%2
     *
     * @param s1
     * @param s2
     * @return
     */
    public int minimumSwap(String s1, String s2) {
        int xy = 0, yx = 0;
        // 统计两种情况的出现次数，s1[i] = 'x',s2[j]='Y'； s1[i] = 'y',s2[j]='x'
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) < s2.charAt(i)) {
                xy++;
            } else if (s1.charAt(i) > s2.charAt(i)) {
                yx++;
            }
        }
        // 二者一奇一偶，最后会剩下一处，无法消除
        if ((xy + yx) % 2 != 0) {
            return -1;
        }
        // 都选择内部交叉交换，若都是偶数则结束，若都是奇数则剩下一个 ”xy“ 和 一个”yx“，需要两次交换消除
        return xy / 2 + yx / 2 + xy % 2 + yx % 2;
    }
}
